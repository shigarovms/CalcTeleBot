from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import markup as nav
#import InlineMurkup as nav

import random

bot = Bot(token='1110437563:AAHRe3H8X5MUSstLnqy0c1fSyIyCNIBxxmc')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ü–æ—Å—á–∏—Ç–∞—é –¥–ª—è —Ç–µ–±—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞\n\n(2+1)*7/5-69', reply_markup=nav.mainMenu)


@dp.message_handler()
async def response_message(message: types.Message):
    if message.text == '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await bot.send_message(message.from_user.id, '–î–æ–ø—É—Å—Ç–∏–º '+str(random.randint(0, 10000)))
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)
    elif message.text == '–î—Ä—É–≥–æ–µ':
        await bot.send_message(message.from_user.id, '–î—Ä—É–≥–æ–µ', reply_markup=nav.otherMenu)
    else:
        try:
            x = eval(message.text)
        except ZeroDivisionError:
            answer = '–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è! –Ω–µ —è —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª üòÅ'
        except Exception:
            answer = '–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞: \n(34+1)/5'
        else:
            answer = f'–í–æ—Ç, —á—Ç–æ —É –º–µ–Ω—è –≤—ã—à–ª–æ:\n{message.text}={x}'
        await bot.send_message(message.from_user.id, answer)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)