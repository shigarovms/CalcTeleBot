
# import re
from re import match, split as resplit
from numpy import cbrt
from message_texts import zero_division_text


# TODO –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –º–ª–Ω
# TODO —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç —Ç–∏–ø–∞ "–∫–æ—Ä–µ–Ω—å —Å—Ç–µ–ø–µ–Ω–∏ 3 –∏–∑ 2 —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 6 + 5"

def text_prepared(text):
    expression = text.lower()

    if '–º–ª–Ω' in expression:
        spltd_exp = resplit(r'[+\-x/]', expression)
        for sub in spltd_exp:
            if '–º–ª–Ω' in sub:
                try:
                    new_sub = f'{int(sub.split("–º–ª–Ω")[0]) * 1000000 + int(sub.split("–º–ª–Ω")[1])} '
                except:
                    new_sub = f'{int(sub.split("–º–ª–Ω")[0]) * 1000000} '
                    #     TODO ValueError: invalid literal for int() with base 10: '–∫—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å –∏–∑ 2 '
                expression = expression.replace(sub, new_sub)

    # expression = expression.replace(' —Ö ', '*')        # –î–µ–ª–∞—é —ç—Ç–æ –≤ eval()
    # expression = expression.replace(' x ', '*')
    # expression = expression.replace('.', '')          # –º–µ—à–∞–µ—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é
    expression = expression.replace(',', '.')
    # expression = expression.replace(' –º–ª–Ω ', '000000')
    expression = expression.replace('–ø–ª—é—Å', '+')
    expression = expression.replace('–º–∏–Ω—É—Å ', '-')
    expression = expression.replace('- ', '-')

    expression = expression.replace(' –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '%')
    expression = expression.replace(' –ø—Ä–æ—Ü–µ–Ω—Ç–∞', '%')
    expression = expression.replace(' –ø—Ä–æ—Ü–µ–Ω—Ç', '%')
    expression = expression.replace('–≤ —Å—Ç–µ–ø–µ–Ω–∏', 'xx')
    expression = expression.replace('—Å—Ç–µ–ø–µ–Ω–∏', 'xx')
    expression = expression.replace('^', 'xx')
    expression = expression.replace('–∫–æ—Ä–µ–Ω—å xx', '–∫–æ—Ä–µ–Ω—å —Å—Ç–µ–ø–µ–Ω–∏')

    expression = expression.replace('–æ—Ç–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞', '(')
    expression = expression.replace('–∑–∞–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞', ')')
    expression = expression.replace('–æ—Ç–∫—Ä—ã—Ç—å —Å–∫–æ–±–∫—É', '(')
    expression = expression.replace('–∑–∞–∫—Ä—ã—Ç—å —Å–∫–æ–±–∫—É', ')')
    # print(expression)
    return expression


def procent_calc(exp):
    procent = float(exp.split('%')[0])
    tzeloe = float(exp.split(' ')[-1])
    x = (0.01 * procent * tzeloe)
    x = int(x) if x - int(x) == 0 else x
    return x


def square_root_calc(exp):
    a = float(exp.split(' ')[-1])
    x = (a ** 2 ** -1)
    x = int(x) if x - int(x) == 0 else x
    return x


def cube_root_calc(exp):
    a = float(exp.split(' ')[-1])
    x = cbrt(a)
    try:
        x = int(x) if x - int(x) == 0 else x
    except:
        pass
    return x


def any_root_calc(exp):
    exp = exp.replace('–∫–æ—Ä–µ–Ω—å —Å—Ç–µ–ø–µ–Ω–∏', '')
    n = float(exp.split(' ')[1])
    a = float(exp.split(' ')[-1])
    x = pow(a, 1/n)
    try:
        x = int(x) if x - int(x) == 0 else x
    except:
        pass
    return x


def exp_calculator(text):
    expression = text_prepared(text)
    # print(expression)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    if match(r'\d*.*\d+%\W\w+\W\d*.*\d+', expression):
        result = procent_calc(expression)
        answer_text = f'–ì–æ—Ç–æ–≤–æ! `{result}` = {text}'
        return answer_text, f' {result}'

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è
    if match(r'–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å\W\w+\W-?\d*.*\d+', expression):
        result = square_root_calc(expression)
        answer_text = f'–ì–æ—Ç–æ–≤–æ! `{result}` = {text}'
        return answer_text, f' {result}'

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –∫—É–±–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–Ω—è
    if match(r'–∫—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å\W\w+\W-?\d*.*\d+', expression):
        result = cube_root_calc(expression)
        answer_text = f'–ì–æ—Ç–æ–≤–æ! `{result}` = {text}'
        return answer_text, f' {result}'

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω—è n-–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑ a
    if match(r'–∫–æ—Ä–µ–Ω—å —Å—Ç–µ–ø–µ–Ω–∏ -?\d*.*\d+\W\w+\W-?\d*.*\d+', expression):
        result = any_root_calc(expression)
        answer_text = f'–ì–æ—Ç–æ–≤–æ! `{result}` = {text}'
        return answer_text, f' {result}'

    try:
        result = eval(expression.replace('—Ö', '*').replace('x', '*'))
        result = int(result) if result - int(result) == 0 else result
    except ZeroDivisionError:
        answer_text = zero_division_text
        result = ''
    except Exception:
        answer_text = f'{expression} ...—Ö–º–º–º... ü§î\n' \
                      f'–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ (34/2-15)xx3 –∏–ª–∏ 33//3-7/4'
        result = ''
    else:
        answer_text = f'–ì–æ—Ç–æ–≤–æ! –í–æ—Ç, —á—Ç–æ —É –º–µ–Ω—è –≤—ã—à–ª–æ:\n`{result}` = {expression}'

    return answer_text, f' {result}'
