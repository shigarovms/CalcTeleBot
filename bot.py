from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor, exceptions
#import markup as nav
import InlineMarkup as inline_nav

bot = Bot(token='1110437563:AAHRe3H8X5MUSstLnqy0c1fSyIyCNIBxxmc')
dp = Dispatcher(bot)
exp_text = {}

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def setup_bot_commands(dp):
    bot_commands = [
        types.BotCommand(command="/help", description="Get info about me")
    ]
    await bot.set_my_commands(bot_commands)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    current_user_id = message.from_user.id
    exp_text[current_user_id] = ''
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ü–æ—Å—á–∏—Ç–∞—é –¥–ª—è —Ç–µ–±—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞\n\n((34/2-15)**3', reply_markup=inline_nav.mainMenu)

@dp.message_handler(commands=['help'])
async def process_start_command(message: types.Message):
    await message.answer('–ù–µ –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–º–æ—á—å, —á—É–≤–∞–∫...?\n–ù–∞—á–Ω–∏ –≤–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä', reply_markup=inline_nav.mainMenu)


@dp.message_handler()
async def response_message(message: types.Message):
    try:
        x = eval(message.text)
    except ZeroDivisionError:
        answer = '–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è! –Ω–µ —è —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª üòÅ'
    except Exception:
        answer = '–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞: \n(34/2-15)**3'
    else:
        answer = f'–í–æ—Ç, —á—Ç–æ —É –º–µ–Ω—è –≤—ã—à–ª–æ:\n{message.text}={x}'
    await bot.send_message(message.from_user.id, answer, reply_markup=inline_nav.mainMenu)


@dp.callback_query_handler(text='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
async def showCalc(message: types.Message):
    
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, '–í–≤–æ–¥–∏—Ç–µ _____________________', reply_markup=inline_nav.calcKeyboard)


# async def input_to_expression(call: types.callback_query):
#     print('–Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å')
#     exp_text = ''
#     while True:
#         print('–≤–æ—à–ª–∏ –≤ while')
#
#         @dp.callback_query_handler(text_contains='input')
#         async def add_to_expression(call: types.callback_query):
#             print('–≤–æ—à–ª–∏ –≤ add_to_expression')
#             symbToAdd = call.data[-1]
#             #global exp_text
#             input_to_expression.exp_text += symbToAdd
#             await bot.delete_message(call.from_user.id, call.message.message_id)
#             await bot.send_message(call.from_user.id, text=input_to_expression.exp_text+' _____________________________'[:-len(input_to_expression.exp_text)], reply_markup=inline_nav.calcKeyboard)
#
#
#     else:
#         return exp_text


# async def expression_calculate(exp_text):
#     try:
#         x = eval(exp_text)
#     except ZeroDivisionError:
#         return '–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è! –Ω–µ —è —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª üòÅ'
#     except Exception:
#         return '–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞: \n(34/2-15)**3\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:'
#     else:
#         return f'{exp_text}={x}'


# @dp.callback_query_handler(text_contains='input')
# async def expression_consrtuctor(call: types.callback_query):
#     exp_text = await input_to_expression(call)
#     answer = await expression_calculate(exp_text)
#     await bot.send_message(call.from_user.id, answer + ' ____________________________'[:-len(answer)],
#                            reply_markup=inline_nav.calcKeyboard)


@dp.callback_query_handler(text_contains='input')
async def expression_consrtuctor(call: types.callback_query):
    symbToAdd = call.data[-1]
    #global exp_text
    exp_text[call.from_user.id] += symbToAdd
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, text=exp_text[call.from_user.id]+' _____________________________'[:-len(exp_text)], reply_markup=inline_nav.calcKeyboard)


@dp.callback_query_handler(text_contains='delete')
async def delete_from_expression(call: types.callback_query):
    #global exp_text
    exp_text[call.from_user.id] = exp_text[call.from_user.id][:-1]
    await bot.delete_message(call.from_user.id, call.message.message_id)
    try:
        await bot.send_message(call.from_user.id, text=exp_text[call.from_user.id], reply_markup=inline_nav.calcKeyboard)
    except exceptions.MessageTextIsEmpty:
        await bot.send_message(call.from_user.id, text='–í–≤–æ–¥–∏—Ç–µ _____________________', reply_markup=inline_nav.calcKeyboard)


@dp.callback_query_handler(text_contains='calculate')
async def expression_calculate(call: types.callback_query):

    try:
        x = eval(exp_text[call.from_user.id])
    except ZeroDivisionError:
        answer = '–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è! –Ω–µ —è —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª üòÅ'
    except Exception:
        answer = '–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞: \n(34/2-15)**3\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:'
    else:
        answer = f'{exp_text[call.from_user.id]}={x}'
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, answer+' ____________________________'[:-len(answer)], reply_markup=inline_nav.calcKeyboard)
    exp_text[call.from_user.id] = ''


# @dp.callback_query_handler(text='–î—Ä—É–≥–æ–µ')
# async def mainMenu_show(message: types.Message):
#     await bot.delete_message(message.from_user.id, message.message.message_id)
#     await bot.send_message(message.from_user.id, '–ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å...', reply_markup=inline_nav.otherMenu)
#
#
# @dp.callback_query_handler(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
# async def mainMenu_show(message: types.Message):
#     await bot.delete_message(message.from_user.id, message.message.message_id)
#     await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=inline_nav.mainMenu)
#
#
# @dp.callback_query_handler(text='–£–¥–∞–ª–∏—Ç—å')
# async def mainMenu_show(message: types.Message):
#     await bot.delete_message(message.from_user.id, message.message.message_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=setup_bot_commands)