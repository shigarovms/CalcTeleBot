from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

bot = Bot(token='1110437563:AAHRe3H8X5MUSstLnqy0c1fSyIyCNIBxxmc')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ü–æ—Å—á–∏—Ç–∞—é –¥–ª—è —Ç–µ–±—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞\n\n(2+1)*7/5-69")


@dp.message_handler()
async def response_message(message: types.Message):
    try:
        x = eval(message.text)
    except ZeroDivisionError:
        answer = '–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è! –Ω–µ —è —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª.'
    except Exception:
        answer = '–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞: \n(34+1)/5'
    except ZeroDivisionError:
        answer = '–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è! –Ω–µ —è —ç—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª üòÅ'
    else:
        answer = f'–í–æ—Ç, —á—Ç–æ —É –º–µ–Ω—è –≤—ã—à–ª–æ:\n{message.text}={x}'

    await bot.send_message(message.from_user.id, answer)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)